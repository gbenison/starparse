; -*-scheme-*-
;
; side-by-side views of multiple spectra
; with synchronized cursors

(use-modules (ice-9 format)
	     (gnome gtk)
             (spectrum)
	     (spec-extra)
	     (starparse)	
	     (burrow assignments))

(sleep-if-requested)

(define-usage
  "Side-by-side comparison of 2D spectra"
  '(<assignment file>)
  '(<spec-1>)
  '(<spec-2>)
  '(...))

(define assignment-file-name (cadr (command-line)))
(define spectrum-file-names (cddr (command-line)))

(define (spec->zoom-canvas spec)
  (let* ((sw (make <gtk-scrolled-window> #:height-request 300))
	 (factor 1)
	 (canv (make <hos-canvas> #:height-request 800 #:width-request 800)))
    (define (make-zoomer factor)
      (define (->int x)
	(inexact->exact (round x)))
      (lambda args
	(let* ((canv-allocation (gtk-widget-get-allocation canv))
	       (canv-width (vector-ref canv-allocation 2))
	       (canv-height (vector-ref canv-allocation 3))
	       (sw-allocation (gtk-widget-get-allocation sw))
	       (sw-width (vector-ref sw-allocation 2))
	       (sw-height (vector-ref sw-allocation 3))
	       (new-width (->int (* canv-width factor)))
	       (new-height (->int (* canv-height factor))))
	  (gtk-widget-set-size-request canv new-width new-height)
	  (set (gtk-scrolled-window-get-hadjustment sw) 'value
	       (- (* (/ new-width canv-width)	
		     (+ (get (gtk-scrolled-window-get-hadjustment sw) 'value)
			(* 0.5 sw-width)))
		  (* 0.5 sw-width)))
	  (set (gtk-scrolled-window-get-vadjustment sw) 'value
	       (- (* (/ new-height canv-height)	
		     (+ (get (gtk-scrolled-window-get-vadjustment sw) 'value)
			(* 0.5 sw-height)))
		  (* 0.5 sw-height))))
	#f))
    (define (set-center x y)
      (let ((sw-hadj (gtk-scrolled-window-get-hadjustment sw))
	    (sw-vadj (gtk-scrolled-window-get-vadjustment sw)))
	(let* ((canv-allocation (gtk-widget-get-allocation canv))
	       (canv-width (vector-ref canv-allocation 2))
	       (canv-height (vector-ref canv-allocation 3))
	       (sw-allocation (gtk-widget-get-allocation sw))
	       (sw-width (vector-ref sw-allocation 2))
	       (sw-height (vector-ref sw-allocation 3))
	       (x-fraction (/ (- (spectrum-orig-ppm spec 0) x)
			      (spectrum-sw-ppm spec 0)))
	       (y-fraction (/ (- y (spectrum-giro-ppm spec 1))
			      (spectrum-sw-ppm spec 1))))
	  (set sw-hadj 'value (- (* x-fraction canv-width)(/ sw-width 2.0)))
	  (set sw-vadj 'value (- (* y-fraction canv-height)(/ sw-height 2.0))))
	#f))
    (canvas-set-spectrum canv spec)
    (gtk-scrolled-window-add-with-viewport sw canv)
    (lambda (req)
      (cond ((eq? req 'zoom-in)(make-zoomer 1.2))
	    ((eq? req 'zoom-out)(make-zoomer (/ 1.0 1.2)))
	    ((eq? req 'canv) canv)
	    ((eq? req 'window) sw)
	    ((eq? req 'set-center) set-center)
	    (else (error "zoom canvas: unknown request " req))))))



; ---- parameters ----

;; size of integration box
(define x-delta 0.04)
(define y-delta 0.4)

(define-class <ornament-group> (<gobject>)
  #:gsignal '(member-dropped #f))
(define (ornament-group-add! group ornament)
  (connect ornament 'dropped (lambda args (emit group 'member-dropped))))

(define (amide residue-name H N verified?)
  (cons residue-name
	(cons (cons (make <gtk-adjustment> #:lower -1000 #:upper 1000 #:step-increment 0.01 #:value H)
		    (make <gtk-adjustment> #:lower -1000 #:upper 1000 #:step-increment 0.01 #:value N))
	      (cons verified? (make <ornament-group>)))))

(define amide:name car)
(define amide:H caadr)
(define amide:N cdadr)
(define amide:verified? caddr)
(define amide:ornament-group cdddr)

(define (amide:set-verified asg verified?)
  (set-car! (cddr asg) verified?))

(define (amide:toggle-verified asg)
  (amide:set-verified asg (not (amide:verified? asg))))

(define (bmrb->hash fname)
  (let ((residues (make-hash-table 31))
	(this-residue #f)
	(atom-name #f))
    (define (ensure-hash resid)
      (let ((result (hash-ref residues resid)))
	(if result
	    result
	    (hash-set! residues resid (make-hash-table 5)))))
    (star-parse fname #f
		(lambda (name value)
		  (case name
		    ((Residue_seq_code Atom_chem_shift.Seq_ID)  (set! this-residue (ensure-hash value)))
		    ((Atom_name Atom_chem_shift.Atom_ID)        (set! atom-name (string->symbol value)))
		    ((Chem_shift_value Atom_chem_shift.Val)     (hash-set! this-residue atom-name value)))))
    residues))

(define assignment-hash (bmrb->hash assignment-file-name))

(hash-fold
 (lambda (key value result)
   (format #t "~a ~a~%" key value))
 #f
 assignment-hash)

(define assignments
  (hash-fold
   (lambda (key value result)
     (let ((new-entry
	    (false-if-exception
	     (amide key
		    (hash-ref value 'H)
		    (hash-ref value 'N)
		    #t))))
       (if new-entry (cons new-entry result) result)))
   '()
   assignment-hash))

(define (write-assignments!)
  (for-each (lambda (asg)
	      (display (list (amide:name asg)
			     (list 'assignments
				   (cons 'H (get (amide:H asg) 'value))
				   (cons 'N (get (amide:N asg) 'value)))
			     (cons 'verified (amide:verified? asg))))
	      (newline)) assignments))

(define (canvas-add-assignments canv . movable?)
  (if assignments
      (for-each (lambda (asg)
		  (let* ((H (amide:H asg))
			 (N (amide:N asg))
			 (group (amide:ornament-group asg))
			 (label (format #f "~a" (amide:name asg)))
			 (marker (canvas-add-marker-text canv label)))
		    (define (sync-colors! . args)
		      (if (amide:verified? asg)
			  (marker-text-set-color marker #xFFFF #x2000 #x2000)
			  (marker-text-set-color marker #xA000 #xA000 #xA000)))
		    (marker-set-adjustments marker H N)
		    (ornament-group-add! group marker)
		    (if (null? movable?)
			(marker-set-movable marker #f)
			(begin
			  (sync-colors!)
			  (connect marker 'acquire (lambda args
						     (amide:toggle-verified asg)
						     (sync-colors!)
						     #f))
			  (connect group 'member-dropped sync-colors!)))
		    'ok))
		assignments)))

(define (fname->panel fname)
  (let* ((spec (spectrum-nih-2d-from-file fname))
	 (thres (make <gtk-adjustment> #:lower 2 #:upper 7 #:value 5.5 #:step-increment 0.1))
	 (thres-spin (make <gtk-spin-button> #:digits 2 #:adjustment thres))
	 (integration-label (make <gtk-label> #:label "integral"))
	 (zoom-canv (spec->zoom-canvas spec))
	 (zoom-marker (canvas-add-marker (zoom-canv 'canv)))
	 (canv (make <hos-canvas>
		 #:width-request 300	
		 #:height-request 200)))
    (canvas-set-thres canv thres)
    (canvas-set-thres (zoom-canv 'canv) thres)
    (canvas-set-draw-negative canv #t)
    (canvas-set-spectrum canv spec)
    (marker-set-adjustments zoom-marker x-adj y-adj)
    (connect zoom-marker 'dropped (lambda args (emit adjustments 'member-dropped)))
    (canvas-add-assignments canv)
    (canvas-add-assignments (zoom-canv 'canv) #t)
    (let ((cursor-horiz (canvas-add-cursor-horizontal canv))
	  (cursor-vert (canvas-add-cursor-vertical canv))
	  (frame (make <gtk-frame> #:label fname))
	  (vbox (make <gtk-vbox>)))
      (define (get-mean)
	(let* ((x (cursor-get-position cursor-vert))
	       (y (cursor-get-position cursor-horiz)))
	  (spectrum-mean (spectrum-extract-2d-ppm spec
						  (- x x-delta)
						  (- y y-delta)
						  (+ x x-delta)
						  (+ y y-delta)))))
      (define (update-integration-label scale)
	(let ((mean (get-mean)))
	  (set integration-label 'label (format #f "intensity: ~$ relative: ~$" mean (/ mean scale)))))
      (let ((hbox (make <gtk-hbox>)))
	(pack-start hbox thres-spin #f #f 5)
	(pack-start hbox integration-label #f #f 5)
	(pack-start vbox hbox #f #f 10))
      (pack-start vbox canv #t #t 0)
      (pack-start vbox (zoom-canv 'window) #t #t 0)
      (cursor-set-adjustment cursor-horiz y-adj)
      (cursor-set-adjustment cursor-vert x-adj)
      (connect zoom-in-button 'clicked (zoom-canv 'zoom-in))
      (connect zoom-out-button 'clicked (zoom-canv 'zoom-out))
      (connect cursor-horiz 'dropped (lambda args (emit adjustments 'member-dropped)))
      (connect cursor-vert 'dropped (lambda args (emit adjustments 'member-dropped)))
      (connect adjustments 'member-dropped
	       (let ((set-center (zoom-canv 'set-center)))
		 (lambda args
		   (set-center
		    (cursor-get-position cursor-vert)
		    (cursor-get-position cursor-horiz))
		   #f)))
      (add frame vbox)
      (show-all frame)
      (ornaments-allow-simultaneous-grab cursor-horiz cursor-vert)
      (list (cons 'name fname)
	    (cons 'spec spec)
	    (cons 'canv canv)
	    (cons 'frame frame)
	    (cons 'update-integration-label update-integration-label)
	    (cons 'get-mean get-mean)
	    (cons 'cursor-horiz cursor-horiz)
	    (cons 'cursor-vert cursor-vert)))))

(define zoom-in-button (make <gtk-button> #:label "ZOOM IN"))
(define zoom-out-button (make <gtk-button> #:label "ZOOM OUT"))
(define write-button (make <gtk-button> #:label "WRITE ASSIGNMENTS"))
(connect write-button 'clicked (lambda args 
				 (with-output-to-file "assignments.scm" write-assignments!)))


(define x-adj #f)
(define y-adj #f)
(let ((spec-1 (spectrum-nih-2d-from-file (car spectrum-file-names))))
  (set! x-adj (adjustment-for-spectrum spec-1 0))
  (set! y-adj (adjustment-for-spectrum spec-1 1)))


(define adjustments (make <ornament-group>))

(define (main)
  (let ((main-window (make <gtk-window> #:title "Compare NMR spectra"))
	(panels (map fname->panel spectrum-file-names))
	(vbox (make <gtk-vbox>))
	(shift-label (make <gtk-label>))
	(spec-hbox (make <gtk-hbox>)))
    (let ((first-panel
	   (catch 'wrong-type-arg (lambda()(car panels))(lambda args (throw 'usage)))))
      (confess "window made")
      (for-each (lambda (panel)
		  (pack-start spec-hbox (assoc-ref panel 'frame) panels)
		  'ok)
		panels)
      (let ((x-adj (cursor-get-adjustment (assoc-ref first-panel 'cursor-horiz)))
	    (y-adj (cursor-get-adjustment (assoc-ref first-panel 'cursor-vert))))
	(define (refresh-label . args)
	  (let ((x (gtk-adjustment-get-value x-adj))
		(y (gtk-adjustment-get-value y-adj)))
	    (set shift-label 'label (format #f "~a, ~a~%" x y)))
	  #f)
	(define refresh-intensities
	  (let ((get-scale (assoc-ref first-panel 'get-mean)))
	    (lambda args
	      (let ((scale (get-scale)))
		(for-each (lambda (panel)
			    ((assoc-ref panel 'update-integration-label) scale)) panels)))))
	(connect x-adj 'value-changed refresh-label)
	(connect y-adj 'value-changed refresh-label)
	(connect x-adj 'value-changed refresh-intensities)
	(connect y-adj 'value-changed refresh-intensities))
      (pack-start vbox shift-label #f #f 10)
      (let ((hbox (make <gtk-hbox>)))
	(pack-start hbox zoom-in-button #f #f 5)
	(pack-start hbox zoom-out-button #f #f 5)
	(pack-start hbox write-button #f #f 5)
	(pack-start vbox hbox #f #f 5))
      (pack-start vbox spec-hbox #t #t 0)
      (add main-window vbox)
      (show-all main-window)
      (connect main-window 'destroy (lambda args (gtk-main-quit)))
      (gtk-main))))

(catch 'usage main usage-message)




